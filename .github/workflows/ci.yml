name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Run tests with coverage
        env:
          DATABASE_URL: sqlite:///./test.db
          REDIS_URL: redis://localhost:6379/0
          CHROMA_DB_PATH: ./test_chromadb
        run: |
          cd backend
          pytest tests/ --cov=app --cov-report=xml --cov-report=term -v
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install linting tools
        run: |
          pip install black flake8 mypy isort bandit
          pip install types-redis types-aiofiles
      
      - name: Check code formatting with Black
        run: |
          black --check --line-length=100 backend/app
      
      - name: Check import sorting with isort
        run: |
          isort --check-only --profile black --line-length 100 backend/app
      
      - name: Lint with flake8
        run: |
          flake8 backend/app --max-line-length=100 --extend-ignore=E203 --count --statistics
      
      - name: Type check with mypy
        run: |
          mypy backend/app --ignore-missing-imports --no-strict-optional
        continue-on-error: true  # Don't fail build on type errors initially
      
      - name: Security check with Bandit
        run: |
          bandit -r backend/app -ll --skip B101,B601
        continue-on-error: true  # Don't fail build on security warnings initially

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: personal-q-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: personal-q-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

